
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{pageTitle}}</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"
    integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Oswald:wght@434&display=swap" rel="stylesheet">
  <style>
    body {
      display: flex;
      justify-content: center;
      height: 100vh;
      margin-top: -47px;
      font-family: "Roboto", sans-serif;
      font-weight: bold;

    }

    .card {
      color: rgb(255, 255, 255);
      width: 30%;
      max-height: 100vh;
      min-height: 50vh;
      overflow-y: auto;
      scrollbar-width: thin;
      scrollbar-color: red transparent;
      background: #ffffff;
      border-radius: 10px;
      box-shadow: 0 10px 8px rgba(0, 0, 0, 0.1);
      padding: 0px;
      font-weight: bold;

      position: relative;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      animation: shadowAnimation 2s infinite;
    }

    @keyframes shadowAnimation {
      0% {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1), 0 0 10px rgba(89, 166, 31, 0.5);
      }

      50% {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1), 0 0 20px rgba(89, 166, 31, 0.7);
      }

      100% {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1), 0 0 10px rgba(89, 166, 31, 0.5);
      }
    }

    .top,
    .bottom {
      position: sticky;
      width: 100%;
      height: 50px;
      background-color: #59a61f;
      z-index: 1;
    }

    .top {
      top: 0;
      height: 12vh;

    }

    .top h4 {
      margin: 0;
      position: absolute;
      top: 10px;
      left: 12px;
    }

    .bottom {
      bottom: 0;
      width: calc(110% + 5px);
      border-radius: 0 0 10px 7px;
      margin-left: -22px;
    }

    .item-row {
      color: black;
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
      border-bottom: 1px dotted rgb(153, 153, 153);

      padding: 0px;
      background-color: #ffffff;
      border-radius: 5px;
    }

    .card-body {
      flex-grow: 1;
      overflow-y: auto;
    }

    @media (max-width: 768px) {
      .card {
        width: 90%;
        max-height: 80vh;
        /* Adjusted max height */
        min-height: 50vh;
      }
    }

    .button-container {
      display: flex;
      align-items: center;
    }

    .quantity-form {
      display: none;
    }

    .qty {
      text-align: center;
    }

    input.qtyplus {
      width: 25px;
      height: 25px;
      color: white;
    }

    input.qtyminus {

      width: 25px;
      color: white;
      height: 25px;
    }

    .card::-webkit-scrollbar {
      width: 50px;
      background: red;
    }

    .view-order-btn {
     align-self: flex-end;
      width: 100%;
      border: none;
      background-color: #59a61f;
      color: white;
      border-radius: 5px;
      padding: 10px;
      cursor: pointer;
      position: sticky;
      bottom: 0;
      font-weight: bold;
      margin-top: auto;
    }

    .view-order-btn:hover {
      transition: all 0.2s ease-in;
      box-shadow: 1px 2px 13px 3px #535a4e;
    }


    @media (max-width: 1080px) and (max-height: 2340px) {
      body {

        background-color: #f0f0f0;
      }

      .card {
        width: 100%;
        max-height: 100vh
      }

      .top {
        top: 0;
        border-radius: 10px 5px 0 0;
        height: 8vh;

      }

    }

    .hidden {
      display: none;
    }
        /* Add this style for the category filter section */
.category-filter {
  display: flex;
margin-top: -24px;
margin-left: -17px;
  overflow-x: auto; /* Enable horizontal scrolling */
  padding: 10px;
  border-bottom: 1px solid #ccc;
}
.category-filter::-webkit-scrollbar {
  display: none;
}

.category-btn {
  white-space: nowrap; /* Prevent button text from wrapping */
  margin-right: 10px; /* Add some space between buttons */
  background-color: #59a61f;
  color: white;
  border: none;
  border-radius: 5px;
  padding: 8px 15px;
  cursor: pointer;
}

  </style>
</head>

<body>
  <div class="card mt-5">
    <div class="top">
      <h4 class="med">MedResto</h4>
    </div>
    {{>search}}
   
    <div class="card-body" id="itemsContainer">
<div id="categoryHeaderContainer">
  <h5 style="color: black; margin-top: -20px; margin-bottom: 15px;">Category</h5>
</div>
      <div class="category-filter">
      {{#each categories}}
       <button class="category-btn" onclick="handleCategoryClick('{{category}}')">{{category}}</button>
        {{/each}} 
      </div> 
      {{#each items}}
      <div class="item-row">
        <div>
          <h5>{{itemName}}</h5>
          <div class="price">{{itemPrice}}</div>
        </div>
        <button class="btn btn-primary" style="background-color:#59a61f; border:none;" onclick="toggleAdjust(this)">Add</button >
        <div class="quantity-form">
          <form method='POST' class='quantity' action='#'>
            <input type='button' value='-' class='qtyminus minus' field='quantity' style="background-color:#59a61f;border:none;border-radius:3px;" />
            <input type='text' name='quantity' value='1' class='qty' style="width: 10vh
            ;background-color: rgb(209, 236, 166);
      border: none;"/>
            <input type='button' value='+' class='qtyplus plus' field='quantity'  style="background-color:#59a61f;border:none;border-radius:3px;"/>
          </form>
        </div>
      </div>
      {{/each}}
      <button id="viewOrderBtn" class="view-order-btn">View Order</button>
    </div>
  </div>

  <script>
function updateItemsList(items, category) {
  const itemsContainer = document.getElementById('itemsContainer');

  // Clear the existing items in the container
  itemsContainer.innerHTML = '';

  // Iterate through the new items and append them to the container
  items.forEach(item => {
    if (item.category === category) { // Check if the item's category matches the clicked category
      const itemRow = document.createElement('div');
      itemRow.classList.add('item-row');

      // Create elements for item details (modify as per your structure)
      const itemName = document.createElement('h5');
      itemName.textContent = item.itemName;

      const itemPrice = document.createElement('div');
      itemPrice.textContent = item.itemPrice;

      // Append the item details to the itemRow
      itemRow.appendChild(itemName);
      itemRow.appendChild(itemPrice);

      // Create and append the "Add" button
      const addButton = document.createElement('button');
      addButton.classList.add('btn', 'btn-primary');
      addButton.style.backgroundColor = '#59a61f';
      addButton.style.border = 'none';
      addButton.textContent = 'Add';
      addButton.onclick = function () {
        toggleAdjust(addButton);
      };

      itemRow.appendChild(addButton);

      // Create and append the quantity form
      const quantityForm = document.createElement('div');
      quantityForm.classList.add('quantity-form');

      // Create quantity input
      const quantityInput = document.createElement('input');
      quantityInput.type = 'text';
      quantityInput.name = 'quantity';
      quantityInput.value = '1';
      quantityInput.classList.add('qty');
      quantityInput.style.width = '10vh';
      quantityInput.style.backgroundColor = 'rgb(209, 236, 166)';
      quantityInput.style.border = 'none';

      // Create and append quantity form elements (e.g., input, buttons)
      quantityForm.appendChild(quantityInput);
      // Add other elements related to quantity form as needed

      itemRow.appendChild(quantityForm);

      // Append the itemRow to the itemsContainer
      itemsContainer.appendChild(itemRow);
    }
  });
}





  function handleCategoryClick(category) {
  console.log('Clicked category:', category);

 fetch(`/api/items?category=${category}`)
  .then(response => response.json())
  .then(data => {
    console.log('Filtered items:', data.items);
    updateItemsList(data.items, category);
  })
  .catch(error => console.error('Error fetching items:', error));

}
document.addEventListener('DOMContentLoaded', function () {
    // Define handleCategoryClick function

    // Define setupCategoryButtons function
    function setupCategoryButtons(categories) {
        const categoryFilter = document.querySelector('.category-filter');

        categories.forEach(category => {
            const button = createButton(category.category, () => handleCategoryClick(category.category));
            categoryFilter.appendChild(button);
        });
    }
//end


   fetch('/api/categories')
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            const categories = data.categories;
            if (!categories || !Array.isArray(categories)) {
                throw new Error('Invalid response format for categories');
            }

            setupCategoryButtons(categories);
        })
        .catch(error => console.error('Error fetching categories:', error));
});
/*
    const categoryButtons = document.querySelectorAll('.category-btn');
    categoryButtons.forEach(button => {
      button.addEventListener('click', function () {
        const category = this.textContent.toLowerCase();
        const subcategoryFilter = document.querySelector('.subcategory-filter'); // Add this line
        filterSubcategories(category, subcategoryFilter);
      });
    });

    */
    function createButton(text, clickHandler) {
      const button = document.createElement('button');
      button.classList.add('category-btn');
      button.textContent = text;
      button.onclick = clickHandler;
      return button;
    }

    function filterCategory(category) {
      const items = document.querySelectorAll('.item-row');
      console.log('Filtering subcategories for:', category);

      items.forEach(item => {
        const categoryElement = item.querySelector('.category');
        const isVisible = category === 'all' || (categoryElement && categoryElement.textContent.toLowerCase() === category);
        item.style.display = isVisible ? 'flex' : 'none';
      });
    }
    const selectedItems = [];
function toggleAdjust(button) {
  const itemRow = button.closest('.item-row');
  if (!itemRow) {
    console.error('Error: Item row not found.');
    return;
  }

  const quantityForm = itemRow.querySelector('.quantity-form');
  if (!quantityForm) {
    console.error('Error: Quantity form not found.');
    return;
  }

  const quantityInput = quantityForm.querySelector('input.qty');
  if (!quantityInput) {
    const quantityFormInner = quantityForm.querySelector('.qty');
    if (quantityFormInner && quantityFormInner.tagName === 'INPUT') {
      quantityInput = quantityFormInner;
    } else {
      console.error('Error: Quantity input not found inside quantity form.');
      return;
    }
  }

  const itemNameElement = itemRow.querySelector('h5');
  const itemName = itemNameElement ? itemNameElement.textContent : '';

  if (!itemName) {
    console.error('Error: Item name not found.');
    return;
  }

  const priceElement = itemRow.querySelector('.price');
  const priceText = priceElement ? priceElement.textContent : '';
  const price = priceText ? parseFloat(priceText.replace(/\$/g, '')) : 0;

  const existingItem = selectedItems.find(item => item.name === itemName);

  if (quantityInput.value === '0') {
    // Remove item if quantity is set to 0
    if (existingItem) {
      selectedItems.splice(selectedItems.indexOf(existingItem), 1);
    }
    button.style.display = 'block';
    quantityForm.style.display = 'none';
  } else {
    button.style.display = 'none';
    quantityForm.style.display = 'flex';
    quantityForm.style.justifyContent = 'center';
    quantityForm.style.alignItems = 'center';

    const quantity = parseInt(quantityInput.value);

    if (existingItem) {
      // Update quantity if item already exists
      existingItem.quantity = quantity;
    } else {
      // Add new item to the list
      selectedItems.push({
        name: itemName,
        quantity: quantity,
        price: price,
      });
    }
  }
}







    // Function to redirect to the second page with selected items
    function redirectToSecondPage() {
      const selectedItemsJSON = encodeURIComponent(JSON.stringify(selectedItems));

      window.location.href = 'second?items=' + selectedItemsJSON;
    }

    document.addEventListener('DOMContentLoaded', function () {
      const searchInput = document.getElementById('searchInput');
      const itemsContainer = document.getElementById('itemsContainer');
      const noMatchMessage = document.getElementById('noMatchMessage');

      searchInput.addEventListener('input', function () {
        const searchTerm = searchInput.value.trim().toLowerCase();

        let matchFound = false;

        document.querySelectorAll('.item-row').forEach(itemRow => {
          const itemName = itemRow.querySelector('h5').textContent.trim().toLowerCase();
          const itemIsVisible = itemName.includes(searchTerm);
          itemRow.classList.toggle('hidden', !itemIsVisible);
          if (itemIsVisible) {
            matchFound = true;
          }
        });
        noMatchMessage.classList.toggle('hidden', matchFound);
      });

      document.getElementById('viewOrderBtn').addEventListener('click', redirectToSecondPage);

      jQuery(document).ready(($) => {
        $('.quantity').on('click', '.plus', function (e) {
          let $input = $(this).prev('input.qty');
          let val = parseInt($input.val());
          $input.val(val + 1).change();
          toggleAdjust($(this).closest('.quantity-form').prev('.btn-primary')[0]);
        });

        $('.quantity').on('click', '.minus', function (e) {
          let $input = $(this).next('input.qty');
          var val = parseInt($input.val());
          if (val > 0) {
            $input.val(val - 1).change();
            toggleAdjust($(this).closest('.quantity-form').prev('.btn-primary')[0]);
          }
        });
      });
     


    });
  </script>
</body>

</html>