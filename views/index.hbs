
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{pageTitle}}</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"
    integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Oswald:wght@434&display=swap" rel="stylesheet">
  <style>
    body {
      display: flex;
      justify-content: center;
      height: 100vh;
      margin-top: -47px;
      font-family: "Roboto", sans-serif;
      font-weight: bold;

    }

    .card {
      color: rgb(255, 255, 255);
      width: 30%;
      max-height: 100vh;
      min-height: 50vh;
      overflow-y: auto;
      scrollbar-width: -45px;
      scrollbar-color: rgb(255, 255, 255) transparent;
      background: #ffffff;
      border-radius: 10px;
      box-shadow: 0 10px 8px rgba(0, 0, 0, 0.1);
      padding: 0px;
      font-weight: bold;

      position: relative;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      animation: shadowAnimation 2s infinite;
    }

    @keyframes shadowAnimation {
      0% {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1), 0 0 10px rgba(89, 166, 31, 0.5);
      }

      50% {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1), 0 0 20px rgba(89, 166, 31, 0.7);
      }

      100% {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1), 0 0 10px rgba(89, 166, 31, 0.5);
      }
    }

    .top,
    .bottom {
      position: sticky;
      width: 100%;
      height: 50px;
      background-color: #59a61f;
      z-index: 1;
    }

    .top {
      top: 0;
      height: 12vh;

    }

    .top h4 {
      margin: 0;
      position: absolute;
      top: 10px;
      left: 12px;
    }

    .bottom {
      bottom: 0;
      width: calc(110% + 5px);
      border-radius: 0 0 10px 7px;
      margin-left: -22px;
    }

    .item-row {
      color: black;
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
      border-bottom: 1px dotted rgb(153, 153, 153);

      padding: 0px;
      background-color: #ffffff;
      border-radius: 5px;
    }

    .card-body {
      flex-grow: 1;
      overflow-y: auto;
    }

    @media (max-width: 768px) {
      .card {
        width: 90%;
        max-height: 80vh;
        /* Adjusted max height */
        min-height: 50vh;
      }
    }

    .button-container {
      display: flex;
      align-items: center;
    }

    .quantity-form {
      display: none;
    }

    .qty {
      text-align: center;
    }

    input.qtyplus {
      width: 25px;
      height: 25px;
      color: white;
    }

    input.qtyminus {

      width: 25px;
      color: white;
      height: 25px;
    }

    .card::-webkit-scrollbar {
      width: 50px;
      background: red;
    }

    .view-order-btn {
      align-self: flex-end;
      width: 100%;
      border: none;
      background-color: #59a61f;
      color: white;
      border-radius: 5px;
      padding: 10px;
      cursor: pointer;
      position: sticky;
      bottom: 0;
      font-weight: bold;
      margin-top: auto;
    }

    .view-order-btn:hover {
      transition: all 0.2s ease-in;
      box-shadow: 1px 2px 13px 3px #535a4e;
    }


    @media (max-width: 1080px) and (max-height: 2340px) {
      body {

        background-color: #f0f0f0;
      }

      .card {
        width: 100%;
        max-height: 100vh
      }

      .top {
        top: 0;
        border-radius: 10px 5px 0 0;
        height: 8vh;

      }

    }

    .hidden {
      display: none;
    }

    /* Add this style for the category filter section */
    .category-filter {
      display: flex;
      margin-top: -24px;
      margin-left: -17px;
      overflow-x: auto;
      /* Enable horizontal scrolling */
      padding: 10px;
      padding-bottom: -11px;
     
    }

    .category-filter::-webkit-scrollbar {
      display: none;
      width: 2px;
    }

    .subcategory-filter {
      display: flex;
      padding-top: 0px;
      margin-top: -24px;
      margin-left: -17px;
      overflow-x: auto;
      /* Enable horizontal scrolling */
      padding: 10px;
     
    }

    .subcategory-filter::-webkit-scrollbar {
      display: none;
      width: 1px;
    }

    /*
.category-filter2 {
display: flex;
margin-top: 5px;
margin-left: -17px;
overflow-x: auto;  
padding: 10px;
border-bottom: 1px solid #ccc;
}
.category-filter2::-webkit-scrollbar {
  display: none;
}
*/

    .category-btn {
      white-space: nowrap;
      /* Prevent button text from wrapping */
      margin-right: 10px;
      /* Add some space between buttons */
      background-color: #59a61f;
      color: white;
      border: none;
      border-radius: 5px;
         padding: 5px 10px;
      cursor: pointer;
    }
  </style>
</head>

<body>
  <div class="card mt-5">
    <div class="top">
      <h4 class="med">MedResto</h4>
    </div>
    {{>search}}
   
 <div class="card-body" id="itemsContainer">
      <div id="categoryHeaderContainer">
        <h5 style="color: black; margin-top: -20px; margin-bottom: 15px;">Category</h5>
      </div>
  

  <div class="category-filter">
 {{#each categories}}
    <button class="category-btn" onclick="handleCategoryClick('{{category}}')">{{category}}</button>
  {{/each}}
  </div> 
      <div id="categoryHeaderContainer">
        <h5 style="color: black; margin-top: -10px; margin-bottom: 0px;">Sub-Category</h5>
      </div>
  

<div class="subcategory-filter " style="margin-top: -13px;" >
<h5 style="color: black; margin-top: 0px; margin-bottom: 10px;">subCategorqy</h5>
{{#each subcategories}}
  <button class="category-btn" style="width: 50px; height:30px;" data-subcategory="{{this}}">{{this}}</button>
{{/each}}

</div>
{{!-- <div class="category-filter2" >
</div> --}}

 {{#each items}}
        <div class="item-row" data-category="{{category}}">
        <div>
          <h5>{{itemName}}</h5>
          <div class="price">{{itemPrice}}</div>
        </div>
        <button class="btn btn-primary" style="background-color:#59a61f; border:none;" onclick="toggleAdjust(this)">Add</button >
        <div class="quantity-form">
          <form method='POST' class='quantity' action='#'>
            <input type='button' value='-' class='qtyminus minus' field='quantity' style="background-color:#59a61f;border:none;border-radius:3px;" />
            <input type='text' name='quantity' value='1' class='qty' style="width: 10vh
            ;background-color: rgb(209, 236, 166);
      border: none;"/>
            <input type='button' value='+' class='qtyplus plus' field='quantity'  style="background-color:#59a61f;border:none;border-radius:3px;"/>
          </form>
        </div>
        </div>
      {{/each}}
      <button id="viewOrderBtn" class="view-order-btn" onclick="redirectToSecondPage()">View Order</button>
    </div>
  </div>

  <script>
function updateItemsList(data, subcategory) {
  const itemsContainer = document.getElementById('itemsContainer');
  itemsContainer.innerHTML = '';

  if (data && Array.isArray(data) && data.length > 0) {
    data.forEach(item => {
      // Assuming the property representing item name is 'itemName'
      const itemName = item.itemName;

      // Assuming the property representing item price is 'itemPrice'
      const itemPrice = item.itemPrice;

      // Create a container for each item
      const itemContainer = document.createElement('div');
      itemContainer.classList.add('item-row');

      // Create elements for item name and price
      const itemNameElement = document.createElement('h5');
      itemNameElement.textContent = itemName;

      const itemPriceElement = document.createElement('div');
      itemPriceElement.textContent = itemPrice;

      // Create the "Add" button
      const addButton = document.createElement('button');
      addButton.classList.add('btn', 'btn-primary');
      addButton.style.backgroundColor = '#59a61f';
      addButton.style.border = 'none';
      addButton.textContent = 'Add';
      addButton.onclick = function () {
        toggleAdjust(addButton);
      };

      // Append elements to the item container
      itemContainer.appendChild(itemNameElement);
      itemContainer.appendChild(itemPriceElement);
      itemContainer.appendChild(addButton);

      // Append the item container to the items container
      itemsContainer.appendChild(itemContainer);
    });
  } else {
    // Handle the case when there are no items
    const noItemsMessage = document.createElement('p');
    noItemsMessage.textContent = 'No items available.';
    itemsContainer.appendChild(noItemsMessage);
  }

  // Append the "View Order" button after adding the items
  const viewOrderButton = document.createElement('button');
  viewOrderButton.id = 'viewOrderBtn';
  viewOrderButton.classList.add('view-order-btn');
  viewOrderButton.textContent = 'View Order';
  viewOrderButton.onclick = redirectToSecondPage;

  itemsContainer.appendChild(viewOrderButton);
}



function bindQuantityEvents() {
  // Example using event delegation:
  document.getElementById('itemsContainer').addEventListener('click', function (event) {
    if (event.target.classList.contains('plus')) {
      // Handle plus button click
      // You can access the corresponding quantity form and adjust the quantity here
      const quantityForm = event.target.closest('.item-row').querySelector('.quantity-form');
      // ... (your logic)
    } else if (event.target.classList.contains('minus')) {
      // Handle minus button click
      // You can access the corresponding quantity form and adjust the quantity here
      const quantityForm = event.target.closest('.item-row').querySelector('.quantity-form');
      // ... (your logic)
    }
  });
}


function handleFilterClick(filterValue, isSubcategory = false) {
  const endpoint = isSubcategory ? '/api/itemss' : '/api/items';
  const key = isSubcategory ? 'subcategory' : 'category';

  fetch(`${endpoint}?${key}=${encodeURIComponent(filterValue)}`)
    .then(response => response.json())
    .then(data => {
      console.log('Filtered items:', data.items);
      updateItemsList(data.items, filterValue);
      bindQuantityEvents(); // Ensure quantity events are bound after updating items
    })
    .catch(error => console.error('Error fetching items:', error));
}





function handleCategoryClick(category) {
  console.log('Clicked category:', category);

fetch(`/api/items?category=${category}`)
  .then(response => response.json())
  .then(data => {
    console.log('Filtered items:', data.items);
    updateItemsList(data.items, category);
    bindQuantityEvents(); // Ensure quantity events are bound after updating items
  })
  .catch(error => console.error('Error fetching items:', error));

}



function subhandleCategoryClick(subcategory) {
  if (!subcategory || typeof subcategory !== 'string') {
    console.error('Error: Subcategory is empty or undefined. Subcategory:', subcategory);
    // Handle the error gracefully, e.g., show an error message to the user
    return;
  }

  console.log('Clicked subcategory:', subcategory);

  fetch(`/api/itemss?subcategory=${encodeURIComponent(subcategory)}`)
    .then(response => response.json())
    .then(data => {
      console.log('Full response:', data);
      const items = data && data.it !== undefined ? data.it : [];
      console.log('Filtered items:', items);
      updateItemsList(items, subcategory);
      bindQuantityEvents();
    })
    .catch(error => {
      console.error('Error fetching items:', error);
    });
}






document.addEventListener('DOMContentLoaded', function () {
    const subcategoryButtons = document.querySelectorAll('.category-btn');

    subcategoryButtons.forEach(button => {
        button.addEventListener('click', function (event) {
            // Extract subcategory directly from the button text
            const subcategory = event.target.textContent.trim();

            // Check if subcategory is not empty
            if (subcategory !== '') {
                // Now, you have the subcategory value, and you can call the handler function
                subhandleCategoryClick(subcategory);
            } else {
                console.error('Error: Subcategory is empty. Button:', event.target);
                // Handle the error gracefully, e.g., show an error message to the user
            }
        });
    });

    // Define handleCategoryClick function
    // Define setupCategoryButtons function
  function setupCategoryButtons(categories) {
    const categoryFilter = document.querySelector('.category-filter');
    categoryFilter.innerHTML = ''; // Clear existing buttons

    categories.forEach(category => {
        const button = createButton(category.category, () => handleCategoryClick(category.category));
        categoryFilter.appendChild(button);
    });
}

//end
   fetch('/api/categories')
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            const categories = data.categories;
            if (!categories || !Array.isArray(categories)) {
                throw new Error('Invalid response format for categories');
            }

            setupCategoryButtons(categories);
        })
        .catch(error => console.error('Error fetching categories:', error));

//Here start for subcategorgy
// Inside the subsetupCategoryButtons function
function subsetupCategoryButtons(subcategories) {
  const subcategoryFilter = document.querySelector('.subcategory-filter');
  subcategoryFilter.innerHTML = ''; // Clear existing buttons

  subcategories.forEach(subcategory => {
    const btn = createButton(subcategory.subCategory, () => subhandleCategoryClick(subcategory.subCategory));
    btn.setAttribute('data-subcategory', subcategory.subCategory); // Set the data-subcategory attribute
    subcategoryFilter.appendChild(btn);
  });
}



fetch('/api/subcategories')
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        const subcategories = data.subcategories;
                console.log('Subcategories:', data.subcategories);

        if (!subcategories || !Array.isArray(subcategories)) {
            throw new Error('Invalid response format for subcategories');
        }

        subsetupCategoryButtons(subcategories);
    })
    .catch(error => console.error('Error fetching subcategories:', error));
});

  function createButton(text, clickHandler) {
  const button = document.createElement('button');
  button.classList.add('category-btn');
  button.textContent = text;
  button.onclick = clickHandler;
  return button;
}

    function filterCategory(category) {
      const items = document.querySelectorAll('.item-row');
      console.log('Filtering subcategories for:', category);

      items.forEach(item => {
        const categoryElement = item.querySelector('.category');
        const isVisible = category === 'all' || (categoryElement && categoryElement.textContent.toLowerCase() === category);
        item.style.display = isVisible ? 'flex' : 'none';
      });
    }
    const selectedItems = [];
function toggleAdjust(button) {
  const itemRow = button.closest('.item-row');
  if (!itemRow) {
    console.error('Error: Item row not found.');
    return;
  }

  const quantityForm = itemRow.querySelector('.quantity-form');
  if (!quantityForm) {
    console.error('Error: Quantity form not found.');
    return;
  }

  const quantityInput = quantityForm.querySelector('input.qty');
  if (!quantityInput) {
    console.error('Error: Quantity input not found.');
    return;
  }

  // Toggle the visibility of quantity adjustment controls
  quantityForm.style.display = quantityForm.style.display === 'none' ? 'flex' : 'none';

  const itemNameElement = itemRow.querySelector('h5');
  const itemName = itemNameElement ? itemNameElement.textContent : '';

  if (!itemName) {
    console.error('Error: Item name not found.');
    return;
  }

  const priceElement = itemRow.querySelector('.price');
  const priceText = priceElement ? priceElement.textContent : '';
  const price = priceText ? parseFloat(priceText.replace(/\$/g, '')) : 0;

  const existingItem = selectedItems.find(item => item.name === itemName);

  if (quantityInput.value === '0') {
    // Remove item if quantity is set to 0
    if (existingItem) {
      selectedItems.splice(selectedItems.indexOf(existingItem), 1);
    }
    button.style.display = 'block';
    quantityForm.style.display = 'none';
  } else {
    button.style.display = 'none';
    quantityForm.style.display = 'flex';
    quantityForm.style.justifyContent = 'center';
    quantityForm.style.alignItems = 'center';

    const quantity = parseInt(quantityInput.value);

    if (existingItem) {
      // Update quantity if the item already exists
      existingItem.quantity = quantity;
    } else {
      // Add a new item to the list with the price
      selectedItems.push({
        name: itemName,
        quantity: quantity,
        price: price,
      });
    }
  }
}


  function redirectToSecondPage() {
  const selectedItemsJSON = encodeURIComponent(JSON.stringify(selectedItems));
  window.location.href = 'second?items=' + selectedItemsJSON;
}



    document.addEventListener('DOMContentLoaded', function () {
      const searchInput = document.getElementById('searchInput');
      const itemsContainer = document.getElementById('itemsContainer');
      const noMatchMessage = document.getElementById('noMatchMessage');

      searchInput.addEventListener('input', function () {
        const searchTerm = searchInput.value.trim().toLowerCase();

        let matchFound = false;

        document.querySelectorAll('.item-row').forEach(itemRow => {
          const itemName = itemRow.querySelector('h5').textContent.trim().toLowerCase();
          const itemIsVisible = itemName.includes(searchTerm);
          itemRow.classList.toggle('hidden', !itemIsVisible);
          if (itemIsVisible) {
            matchFound = true;
          }
        });
        noMatchMessage.classList.toggle('hidden', matchFound);
      });

document.getElementById('itemsContainer').addEventListener('click', function (event) {
  if (event.target && event.target.id === 'viewOrderBtn') {
    redirectToSecondPage();
  }
});
$('.quantity').on('click', '.plus', function (e) {
  let $input = $(this).prev('input.qty');
  let val = parseInt($input.val());
  $input.val(val + 1).change();

  // Retrieve the itemRow associated with the clicked plus button
  let itemRow = $(this).closest('.item-row')[0];
  if (!itemRow) {
    console.error('Error: Item row not found.');
    return;
  }

  toggleAdjust(itemRow.querySelector('.btn-primary'));
});

$('.quantity').on('click', '.minus', function (e) {
  let $input = $(this).next('input.qty');
  let val = parseInt($input.val());
  if (val > 0) {
    $input.val(val - 1).change();

    // Retrieve the itemRow associated with the clicked minus button
    let itemRow = $(this).closest('.item-row')[0];
    if (!itemRow) {
      console.error('Error: Item row not found.');
      return;
    }

    toggleAdjust(itemRow.querySelector('.btn-primary'));
  }
});



      });
  
  </script>
</body>

</html>